package visualRecognitionTest;

import java.util.ArrayList;

import generalpurpose.gpExecBatch;
import generalpurpose.gpPrintStream;
import generalpurpose.gpUtils;

import javax.swing.JTextField;
import javax.swing.SwingWorker;


public class visualRecognitionController extends SwingWorker<Integer, Integer> {

	private gpUtils xU = null;
	private gpPrintStream sout = null;
	
	JTextField textField = null;   // wordt gebruikt als callback
	private boolean isOK = true;
	private String application=null;
	private String currentImageFileName=null;
	private String ScriptName = null;
	private String OutputName = null;
	
	
	//---------------------------------------------------------------------------------
	public void setScriptName(String sin)
	{
		ScriptName = sin.trim();
	}
	public void setOutputName(String sin)
	{
		OutputName = sin.trim();
	}
	public void setApplciation(String sin)
	{
		application = sin.trim();
	}
	public void setImageName(String sin)
	{
		currentImageFileName=sin;
	}
	//---------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------
	public visualRecognitionController (JTextField it)
	//---------------------------------------------------------------------------------
	{
		textField = it;
		xU = new gpUtils();
	}
	
	@Override
	//---------------------------------------------------------------------------------
	protected Integer doInBackground() throws Exception
	//---------------------------------------------------------------------------------
    {
		 if( ScriptName == null ) {
			 isOK=false;
			 System.err.println("Scriptname has not been set");
			 return -1;
		 }
		 if( OutputName == null) {
			 isOK=false;
			 System.err.println("Outputname has not been set");
			 return -1;
		 }
		 if( currentImageFileName == null) {
			 isOK=false;
			 System.err.println("ImageFileName has not been set");
			 return -1;
		 }
		 if( application == null) {
			 isOK=false;
			 System.err.println("Application has not been set");
			 return -1;
		 }
		 //
	     if( application.compareToIgnoreCase("WATSON") == 0) isOK = do_watson();
	     else
	     if( application.compareToIgnoreCase("TENSORFLOW") == 0) isOK = do_tensorflow();
	     else isOK = false;	 
	     if( isOK ) {
	    	isOK = runscript();
	     }
		return 0;
    }
	
	@Override
	//---------------------------------------------------------------------------------
	protected void done()
	//---------------------------------------------------------------------------------
	{
		 if (!this.isCancelled()) {
	            System.out.println("Swingworker stopped [" + application + "]");
			    if( isOK ) textField.setText("Done"); else textField.setText("Error");
	     }
	}
	
	
	
	//---------------------------------------------------------------------------------
	private boolean do_watson()
	//---------------------------------------------------------------------------------
	{
		if( removeoutput() == false ) return false;
		if( imageExists() == false ) return false;
		if( removescript() == false ) return false;
		if( createscript() == false ) return false;
		//  text
		if( xU.ctSlash == '/')        {
			sout.println( "# Generated by visualRecognitionTest" );
			sout.println( "# " + xU.prntDateTime(System.currentTimeMillis(),"dd-MMM HH:mm:SS"));
			sout.println( "cd /home/koen/beeldherkenning/Watson/USSouth" );
            sout.println( "curl -X POST -F \"images_file=@" + 
            		currentImageFileName + 
            		"\" -F \"parameters=@myparams.json\" \"https://gateway-a.watsonplatform.net/visual-recognition/api/v3/classify?api_key=ebd3fb912e3531e5cd9aba8e1b6db42dbe347569&version=2016-12-01\""
                    );
           /*
			 * 
			 * 
curl -X POST -F "images_file=@../Images/$1.jpg" -F "parameters=@myparams.json" "https://gateway-a.watsonplatform.net/visual-recognition/api/v3/classify?api_key=ebd3fb912e3531e5cd9aba8e1b6db42dbe347569&version=2016-12-01"
			 */
		}
		else {
		 sout.println( "REM " + currentImageFileName );
		 sout.println( "DIR" );
		}
		//
		return closescript();
	}
	
	//---------------------------------------------------------------------------------
	private boolean do_tensorflow()
	//---------------------------------------------------------------------------------
	{
		if( removeoutput() == false ) return false;
		if( imageExists() == false ) return false;
		if( removescript() == false ) return false;
		if( createscript() == false ) return false;
		//
		if( xU.ctSlash == '/')        {
			sout.println( "# Generated by visualRecognitionTest" );
			sout.println( "# " + xU.prntDateTime(System.currentTimeMillis(),"dd-MMM HH:mm:SS"));
			sout.println( "cd /home/koen/beeldherkenning/TensorFlow" );
			sout.println( "python3 ./test_image.py " + currentImageFileName );
		}
		else {
		 sout.println( "REM " + currentImageFileName );
		 sout.println( "ver" );
		}
		//
		return closescript();
	}
	
	//---------------------------------------------------------------------------------
	private boolean imageExists()
	//---------------------------------------------------------------------------------
	{
		boolean ib = xU.IsBestand(currentImageFileName);
		if( ib == false ) System.err.println("Cannot locate image file [" + currentImageFileName + "]");
		return ib;
	}
	
	//---------------------------------------------------------------------------------
	private boolean removeoutput()
	//---------------------------------------------------------------------------------
	{
			if( xU.IsBestand(OutputName) ) {
				xU.VerwijderBestand(OutputName);
				if( xU.IsBestand(OutputName) ) {
					System.err.println("Cannot remove output [" + OutputName + "]");
					return false;
				}
			}
			return true;
	}
		
	//---------------------------------------------------------------------------------
	private boolean removescript()
	//---------------------------------------------------------------------------------
	{
		if( xU.IsBestand(ScriptName) ) {
			xU.VerwijderBestand(ScriptName);
			if( xU.IsBestand(ScriptName) ) {
				System.err.println("Cannot remove script [" + ScriptName + "]");
				return false;
			}
		}
		return true;
	}
	
	//---------------------------------------------------------------------------------
	private boolean createscript()
	//---------------------------------------------------------------------------------
	{
		sout = new gpPrintStream(ScriptName , "ASCII");
		return sout.isActive();
	}
	
	//---------------------------------------------------------------------------------
	private boolean closescript()
    //---------------------------------------------------------------------------------
	{
		boolean ib = sout.close();
		sout = null;
		return ib;
	}
	
	//---------------------------------------------------------------------------------
	private boolean runscript()
	//---------------------------------------------------------------------------------
	{
	   if( xU.IsBestand(ScriptName) == false ) return false;
	   gpExecBatch bat = new gpExecBatch(ScriptName);
	   int level = bat.getExitLevel();
	   if( level != 0 ) {
		   System.err.println("OS Exit level [" + level + "]  -> Error");
		   bat=null;
		   return false;
	   }
	   //   
	   if( removeoutput() == false ) return false;
	   //
	   sout = new gpPrintStream(OutputName , "ASCII");
	   if( sout.isActive() == false ) {
		   System.err.println("cannot open for write [" + OutputName + "]");
		   bat = null;
		   sout = null;
		   return false;
	   }
	   //
	   ArrayList<String> l = bat.getSTDOUT();
	   sout.println("=> stdout [" + l.size() + "]");
	   for(int i=0;i<l.size();i++)
	   {
		   sout.println(l.get(i));
	   }
	   //
	   sout.println("");
	   l = bat.getSTDERR();
	   sout.println("=> stderr [" + l.size() + "]");
	   for(int i=0;i<l.size();i++)
	   {
		   sout.println(l.get(i));
	   }
	   //
	   boolean ib = sout.close();
	   sout = null;
	   bat = null;
	   return ib;
    }
}
